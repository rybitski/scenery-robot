/*
This program is able to constantly read commands from an
xbox controller. It immediately turns the motors according
to those values. While it's turning, it's also recording the
encoder ticks generated by these turns.
*/

#include <Servo.h>
#include <SPI.h>
#include <EthernetV2_0.h>

const int SDCARD_CS_PIN = 4;

Servo leftMotor;
Servo rightMotor;

// server stuff
boolean lastConnected = false;
String currentLine;
byte mac[] = { 0x90, 0xA2, 0xDA, 0x00, 0xD4, 0xE7 };
const int PORT = 29281;
EthernetClient client;

// datastructure to hold the path
// Only 16 long because of memorize size constraints
// Longs are 4 bytes, * 2 * 16 = 1024 bytes
// SuperDroid Robots Dual LS7366R Quadrature Encoder Buffer
const int BUFFER_SIZE = 16;
signed long pathBuffer[BUFFER_SIZE][2]; // for left and right encoder
unsigned int pathBufferIndex = 0;

void setup() {
	Serial.begin(9600);
	
	Serial.println("Begin setup()");
	Serial.println("We are the client!");


	// Set chip select high (inactive) for SD card.
	pinMode(SDCARD_CS_PIN, OUTPUT);
	digitalWrite(SDCARD_CS_PIN, HIGH);

	Serial.print("Configuring Ethernet client... ");
	if (Ethernet.begin(mac) == 0) {
		Serial.println("failure (DHCP error).");
		while (true);
	}
	Serial.print("Success. ");

	delay(1000); // give the Ethernet sheild a second to initialize

	// get and print our IP address
	Serial.print("(Our IP: ");
	Serial.print(Ethernet.localIP());
	Serial.println(")");
	Serial.println();

	char serverName[] = "192.168.1.103";
	if (client.connect(serverName, PORT)) {
		Serial.println("connected");
		client.println("GET /search?q=arduino HTTP/1.0");
		client.println();
	}
	else {
		Serial.println("connection failed");
	}

	Serial.println("Done with setup()");
}

void loop() {
	// if there are incoming bytes available 
	// from the server, read them and print them:
	if (client.available()) {
	  char c = client.read();
	  Serial.print(c);
	}

	// send the recorded path buffer back to the server
	// client.write(pathBuffer[pathBufferIndex], 2);
	// if (++pathBufferIndex == BUFFER_SIZE) {
	// 	pathBufferIndex = 0;
	// }
	const char message[] = {'B', '\n'};
	client.write(message);

	// if the server's disconnected, stop the client:
	if (!client.connected()) {
	  Serial.println();
	  Serial.println("Server has disconnected. Stopping client.");
	  client.stop();

	  // do nothing forevermore:
	  while(true);
	}
}
